<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--定义一个自定义的realm -->
    <bean id="authenRealm" class="cn.nine.crm.realm.AuthenRealm">
        <property name="credentialsMatcher"><!--配置md5方式加密-->
            <bean class="cn.nine.crm.credential.MyHashedCredentialMatcher"><!--自定义验证密码规则-->
                <property name="hashAlgorithmName" value="MD5"/>
                <property name="hashIterations" value="9"/>
            </bean>
        </property>
    </bean>
    <!--session管理器-->
    <bean id="sessionManager" class="cn.nine.crm.session.SessionManager"/>
    <!-- 配置apache的管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 配置一个realm，到数据库中获取权限数据 -->
        <property name="realm" ref="authenRealm"/>

        <!-- session管理器-->
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!--lifecycleBeanPostProcessor：可以自动调用在Spring Ioc窗口中 Shiro bean的生成周期方法 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- 启动ioc容器中使用 shiro的注解，但是必需配置在Spring Ioc容器中Shiro bean的生成周期方法 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--shiro的真实过滤器(注：这个名称必需和web.xml的代表过滤器【DelegatingFilterProxy】名称一样) -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 登录的url,如果没有登录，你访问的路径会跳到这个页面 -->
        <!--当你访问需要登录才能访问的资源时，但是shiro检测到你未登录，会重定向到loginUrl这个地址-->
        <property name="loginUrl" value="/login"/>
        <!-- 登录成功的url,如果登录成功，会跳转到这个页面一般不用，自己写跳转 -->
        <property name="successUrl" value="/s/main.jsp"/>
        <!-- 没有权限时跳转到这个位置 -->
        <!--当你访问需要授权才能访问的资源时，但是shiro检测到你未被授权，会重定向到unauthorizedUrl这个地址-->
        <property name="unauthorizedUrl" value="/admin/public/403.jsp"/>
        <!--
            配置哪些资源被保护，哪些资源需要权限
            anon：不需要登录也可以访问相应的权限
            perms：必须要授权才能访问的资源
            登录 注册 注销都要配置不需要登录就能访问
            authc：需要登录后才能访问，必须放在最后一行，除了上面的的资源，其余的都需要权限
            /** ：所有文件及其子文件
        -->
        <!-- <property name="filterChainDefinitions">
             <value>
                 #不需要登录的就能访问的
                 /Admin/gitHubLogin = anon
                 /Admin/qqLogin = anon
                 /Admin/login = anon
                 /Admin/logout = anon
                 /Admin/register = anon
                 /iview/** = anon&lt;!&ndash;放行iview文件下的资源，image或js,css&ndash;&gt;
                 /Admin/Employee/save = perms[employee:save]&lt;!&ndash;需要save才能访问&ndash;&gt;
                 /Admin/Employee/delete = perms[employee:delete]
                 /Admin/Employee/update = perms[employee:update]
                 /** = authc
             </value>
         </property>-->
        <!--过滤器-->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>
        <!-- 引用自定义的权限过滤器 -->
        <!-- <property name="filters">
             <map>&lt;!&ndash;注意这里的key选派和filterChainDefinitionMap中的名字相同也就是perms[sn]修改成customPerms[sn]&ndash;&gt;
                 <entry key="customPerms" value-ref="customPermissionsAuthorizationFilter"></entry>
             </map>
         </property>--><!--直接配置，或使用实例工厂-->
        <property name="filters" ref="filterMap"/>

    </bean>
    <!--<bean id="customPermissionsAuthorizationFilter" class="cn.itsource.shiro.CustomPermissionsAuthorizationFilter"/>-->
    <!--实例工厂-->
    <bean id="filtersMapFactory" class="cn.nine.crm.realm.FiltersMapFactory"/>
    <bean id="filterMap" factory-bean="filtersMapFactory" factory-method="create"/>
    <!--实例工厂-->
    <bean id="filterChainDefinitionMapFactory" class="cn.nine.crm.realm.FilterChainDefinitionMap"/>
    <bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapFactory" factory-method="create"/>
</beans>
